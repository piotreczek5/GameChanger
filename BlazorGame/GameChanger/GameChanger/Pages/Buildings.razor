@page "/buildings"
@using Microsoft.AspNetCore.SignalR.Client;
@using GameChanger.Core.SignalR;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime



@inherits LayoutComponentBase

@*<nav class="navbar sticky-top" style="background-color:white; box-shadow:0px 20px 20px 0px #7c57bbc2; top:140px;text-align:center;justify-content:space-evenly;">
    <div>
        Buildings
    </div>
    <div>
        <div>City</div>
        <div>@CurrentCity?.Name</div>
    </div>
    <div>
        <div>Land</div>
        <div>@CurrentLand?.Name</div>
    </div>

</nav>*@

@foreach(var notification in _notifications)
{
    <p>@($"Building  {notification.BuildingName} has changed status to: {notification.BuildingStatus}") </p>
}

@foreach (BuildingTypes buildingType in Enum.GetValues(typeof(BuildingTypes)))
{
    var sectorBuilding = GetBuildingInfoFromSector(buildingType);

    if (sectorBuilding != null)
    {
        <div style="display:inline-flex;justify-content:center; margin-top: 20px; margin-bottom: 20px; border: groove 1px;">
            <h3>@buildingType.ToString()</h3>
            <br />

            @{
                var currentBuildingLvl = sectorBuilding?.CurrentLvl;
                var currentBuildingStatus = sectorBuilding?.Status?.Code;
                var currentLvlBuildingFromConfiguration = GetBuildingInfoFromConfiguration(buildingType, sectorBuilding.CurrentLvl);
                var nextLvlBuildingFromConfiguration = GetBuildingInfoFromConfiguration(buildingType, sectorBuilding.CurrentLvl + 1);

                switch (currentBuildingStatus)
                {
                    case BuildingStatuses.BROKEN:
                        <button id="@($"{buildingType}_{BuildActions.FIX}")" class="btn btn-warning" @onclick="() => PerformBuildingAction(buildingType, BuildActions.FIX, currentBuildingLvl.Value)">  Fix building </button>
                        break;
                    case BuildingStatuses.BUILDING:
                        <button class="btn btn-secondary" onclick="" disabled>  Building Now... </button>
                        <p>Time remaining : <span id="@($"{buildingType}_{currentBuildingStatus}")"></span></p>
                        break;
                    case BuildingStatuses.IDLE:
                        <button class="btn btn-secondary" onclick="" disabled>  Idle... </button>
                        break;
                    case BuildingStatuses.FIXING:
                        <button class="btn btn-secondary" onclick="" disabled>  Fixing ... </button>
                        <p>Time remaining : <span id="@($"{buildingType}_{currentBuildingStatus}")"></span></p>
                        break;
                    case BuildingStatuses.DESTROYING:
                        <button class="btn btn-secondary" onclick="" disabled>  Demolishing ... </button>
                        <p>Time remaining : <span id="@($"{buildingType}_{currentBuildingStatus}")"></span></p>
                        break;
                    case BuildingStatuses.BUILT:
                        if (nextLvlBuildingFromConfiguration != null)
                        {
                            <button id="@($"{buildingType}_{BuildActions.BUILD}")" class="btn btn-success" @onclick="() => PerformBuildingAction(buildingType, BuildActions.BUILD, currentBuildingLvl.Value + 1)">  Upgrade building </button>
                        }
                        <button id="@($"{buildingType}_{BuildActions.DESTROY}")" class="btn btn-danger" @onclick="() => PerformBuildingAction(buildingType, BuildActions.DESTROY, currentBuildingLvl.Value)"> Destroy </button>
                        break;
                    default:
                        <button id="@($"{buildingType}_{BuildActions.BUILD}")" class="btn btn-success" @onclick="() => PerformBuildingAction(buildingType, BuildActions.BUILD, 1)"> Build </button>
                        break;
                }
            }

            @{


                <p><strong>Name : </strong> @sectorBuilding.Name</p>

                if (currentLvlBuildingFromConfiguration != null)
                {
                    <p><strong>Description: </strong> @currentLvlBuildingFromConfiguration?.Description</p>
                }

                <p><strong>Current Lvl : </strong>@sectorBuilding.CurrentLvl</p>
                <p><strong>Status: </strong> @sectorBuilding.Status.Code</p>

                if (currentLvlBuildingFromConfiguration != null)
                {
                    <tr><p>Time to destroy : @($"{currentLvlBuildingFromConfiguration?.DestroyTime?.TotalSeconds}s") </p></tr>
                    <p>
                        <strong>Current Consumption</strong>
                        @foreach (var resourceAmount in currentLvlBuildingFromConfiguration?.BaseResourceConsumption)
                        {
                        <p><p>@resourceAmount.Resource : @resourceAmount.Amount</p></p>
                    }
                        </p>

                        <p>
                            <strong>Current Production</strong>
                            @foreach (var resourceAmount in currentLvlBuildingFromConfiguration?.BaseResourceProduction)
                            {
                            <p>@resourceAmount.Resource : @resourceAmount.Amount</p>
                        }
                            </p>
                        }

                        if (nextLvlBuildingFromConfiguration != null)
                        {
                            <p>
                                <strong>NEXT LEVEL :(@(nextLvlBuildingFromConfiguration.Lvl))</strong>

                                <p><strong>Time to build :</strong> @($"{nextLvlBuildingFromConfiguration?.BuildTime?.TotalSeconds}s")</p>
                                <p><strong>Description: </strong>   @nextLvlBuildingFromConfiguration?.Description</p>

                            </p>
                            <p>
                                <strong>Building Costs</strong>
                                @foreach (var resourceAmount in nextLvlBuildingFromConfiguration?.BuildCosts)
                                {

                                <p>
                                    @resourceAmount.Resource : @resourceAmount.Amount
                                </p>
                                }
                                </p>
                                <p>
                                    <strong>Consumption</strong>
                                    @foreach (var resourceAmount in nextLvlBuildingFromConfiguration?.BaseResourceConsumption)
                                    {
                                        <td>
                                    <p>@resourceAmount.Resource : @resourceAmount.Amount</p></td>
                                    }
                                    </p>

                                    <p>
                                        <strong>Production</strong>
                                        @foreach (var resourceAmount in nextLvlBuildingFromConfiguration?.BaseResourceProduction)
                                        {
                                        <p>@resourceAmount.Resource : @resourceAmount.Amount</p>
                                        }
                                    </p>
                                    }
                                    else
                                    {
                                        <p>The highest possible building LVL have been achieved.</p>
                                    }
            }
        </div>
    }
    else
    {
        var nextLvlBuildingFromConfiguration = GetBuildingInfoFromConfiguration(buildingType, 1);
        if (nextLvlBuildingFromConfiguration != null)
        {
            <div style="display: inline-flex; justify-content: center; margin-top: 20px; margin-bottom: 20px; border: groove 1px;">

                <p><h3>Building Type: @buildingType.ToString()</h3></p>
                <p>
                    @{
                        <button id="@($"{buildingType}_{BuildActions.BUILD}")" class="btn btn-success" @onclick="() => PerformBuildingAction(buildingType, BuildActions.BUILD, 1)"> Build </button>
                    }
                </p>


                @{

                    <p><strong>Name : </strong> @nextLvlBuildingFromConfiguration.Name</p>
                    <p><strong>Description: </strong> @nextLvlBuildingFromConfiguration?.Description</p>
                    <p><strong>Current Lvl : </strong> 0</p>
                    <p><strong>Status: NOT BUILT </strong></p>

                    <p>
                        <strong>NEXT LEVEL </strong> (@(nextLvlBuildingFromConfiguration.Lvl))

                    <p><strong>Time to build :</strong> @($"{nextLvlBuildingFromConfiguration?.BuildTime?.TotalSeconds}s")</p>
                    <p><strong>Description: </strong> @nextLvlBuildingFromConfiguration?.Description</p>

                    </p>
                    <p>
                        <strong>Building Costs</strong>
                        @foreach (var resourceAmount in nextLvlBuildingFromConfiguration?.BuildCosts)
                        {
                        <p>
                            @resourceAmount.Resource : @resourceAmount.Amount
                        </p>
                    }
                        </p>
                        <p>
                            <strong>Consumption</strong>
                            @foreach (var resourceAmount in nextLvlBuildingFromConfiguration?.BaseResourceConsumption)
                            {
                                <td>
                            <p>@resourceAmount.Resource : @resourceAmount.Amount/s</p></td>
                        }
                            </p>

                            <p>
                                <strong>Production</strong>
                                @foreach (var resourceAmount in nextLvlBuildingFromConfiguration?.BaseResourceProduction)
                                {
                                <p>@resourceAmount.Resource : @resourceAmount.Amount/s</p>
                            }
                                </p>

                }
            </div>
        }

    }

}

@code {
    // var building in CurrentPlayerSector.Buildings
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    protected List<BuildingDocument> PlayerBuildings { get; set; }
    protected SectorDocument CurrentPlayerSector { get; set; }
    protected PlayerDocument CurrentlyLoggedPlayer { get; set; }
    protected City CurrentCity { get; set; }
    protected Land CurrentLand { get; set; }

    protected HubConnection hubConnection;
    List<NotificationMessage> _notifications = new List<NotificationMessage>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/buildingsHub")).Build();

        hubConnection.On<string,string>("BuildingStatusChanged", (buildingCode, buildingStatus) =>
        {
            _notifications.Add(new NotificationMessage
            {
                BuildingName = buildingCode,
                BuildingStatus = buildingStatus,
                MsgId = _notifications.Count() + 1
            });

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        await UpdatePageData();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        CurrentPlayerSector?.Buildings?
            .Where(b => b.Status.Code == BuildingStatuses.DESTROYING || b.Status.Code == BuildingStatuses.FIXING || b.Status.Code == BuildingStatuses.BUILDING)
            .ToList()
            .ForEach(async (b) =>
        await SpawnTimer(b.BuildingType, b.Status.Code, (b.Status as IContinousBuildingStatus).TimeToComplete));

        await base.OnAfterRenderAsync(firstRender);
    }

    protected async Task UpdatePageData()
    {
        var authState = await AuthState;
        var currentUserId = Guid.Parse(authState.User.Claims.Where(c => c.Type == "PlayerGuid").Single().Value);
        CurrentlyLoggedPlayer = await Mediator.Send(new GetPlayerInfoQuery { Id = currentUserId });
        CurrentPlayerSector = await Mediator.Send(new GetSectorInfoQuery { Id = CurrentlyLoggedPlayer.CurrentSector.CurrentSectorId });

        CurrentCity = MapConfiguration.GetCityByCode(CurrentPlayerSector?.CityCode);
        CurrentLand = MapConfiguration.GetLandByCode(CurrentPlayerSector?.LandCode);
    }

    private async Task SpawnTimer(BuildingTypes buildingType, BuildingStatuses buildingStatus, DateTime? dateTimeToFinish)
    {
        var timerItemId = $"{buildingType}_{buildingStatus}";
        await JSRuntime.InvokeVoidAsync("startTimer", dateTimeToFinish, timerItemId);
    }

    protected BuildingDocument GetBuildingInfoFromSector(BuildingTypes buildingType)
    {
        return CurrentPlayerSector?.Buildings?.SingleOrDefault(b => b.BuildingType == buildingType);
    }

    protected async Task<bool> CanPerformBuildOperation(BuildingTypes buildingType)
    {
        await UpdatePageData();

        var building = GetBuildingInfoFromConfiguration(buildingType, 1);

        var currentResources = await Mediator.Send(new GetSectorResourcesQuery { SectorId = CurrentPlayerSector?.Id });
        var hasResourcesToBuild = currentResources?.HasResources(building.BuildCosts);

        return hasResourcesToBuild.HasValue ?
            hasResourcesToBuild.Value : false;
    }

    protected Building GetBuildingInfoFromConfiguration(BuildingTypes buildingType, int lvl)
    {
        return BuildingConfiguration?.Buildings?.SingleOrDefault(b => b.BuildingType == buildingType && b.Lvl == lvl);
    }

    protected async Task PerformBuildingAction(BuildingTypes buildingType, BuildActions buildAction, int buildingLvl)
    {
        await JSRuntime.InvokeVoidAsync("setElementDisabledStatus", $"{buildingType}_{buildAction}", true);

        var buildindInfo = GetBuildingInfoFromConfiguration(buildingType, buildingLvl);
        var sectorBuildingInfo = GetBuildingInfoFromSector(buildingType);

        switch (buildAction)
        {
            case BuildActions.BUILD:
                if (await CanPerformBuildOperation(buildingType) == true)
                {
                    await GameNotificationProcessor.ProcessAsync(new BuildBuildingCommand { BuildingType = buildingType, SectorId = CurrentPlayerSector?.Id, BuildingLvl = buildingLvl, PlayerId = CurrentlyLoggedPlayer?.Id });
                }
                break;
            case BuildActions.DESTROY:
                await GameNotificationProcessor.ProcessAsync(new DemolishBuildingCommand { BuildingType = buildingType, SectorId = CurrentPlayerSector?.Id, PlayerId = CurrentlyLoggedPlayer?.Id });
                break;
            case BuildActions.FIX:
                await GameNotificationProcessor.ProcessAsync(new FixBuildingCommand { BuildingType = buildingType, SectorId = CurrentPlayerSector?.Id, PlayerId = CurrentlyLoggedPlayer?.Id });
                break;
        }

        await UpdatePageData();

        await JSRuntime.InvokeVoidAsync("setElementDisabledStatus", $"{buildingType}_{buildAction}", false);

        await InvokeAsync(StateHasChanged);
    }

}
