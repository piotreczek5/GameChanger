@page "/buildings"
@inherits LayoutComponentBase

    <nav class="navbar sticky-top" style="background-color:white; box-shadow:0px 20px 20px 0px #7c57bbc2; top:140px;text-align:center;justify-content:space-evenly;">
        <div>
            Buildings
        </div>
        <div>
            <div>City</div>
            <div>@CurrentPlayerSector?.City</div>
        </div>
        <div>
            <div>Land</div>
            <div>@CurrentPlayerSector?.Land</div>
        </div>
    </nav>
        @foreach (BuildingTypes buildingType in Enum.GetValues(typeof(BuildingTypes)))
        {
            <table class="table table-striped" style="margin-top:20px;margin-bottom:20px; border:groove 1px;">
                <tbody>
                    <div style="justify-content:left">
                        <tr>
                            <td><p>Building Type: @buildingType.ToString()</p></td>
                            <td>
                                @switch (GetBuildingInfoFromSector(buildingType)?.Status?.Code)
                                {
                                    case BuildingStatuses.BROKEN:
                                        <button class="btn btn-warning" @onclick="() => PerformBuildingAction(buildingType,BuildActions.FIX)">  Fix building </button>
                                        break;
                                    case BuildingStatuses.BUILDING:
                                        <button class="btn btn-secondary" onclick="" disabled>  Building Now... </button>
                                        break;
                                    case BuildingStatuses.IDLE:
                                        <button class="btn btn-secondary" onclick="" disabled>  Idle... </button>
                                        break;
                                    case BuildingStatuses.FIXING:
                                        <button class="btn btn-secondary" onclick="" disabled>  Fixing ... </button>
                                        break;
                                    case BuildingStatuses.BUILT:
                                        <button class="btn btn-success" @onclick="() => PerformBuildingAction(buildingType,BuildActions.UPGRADE)">  Upgrade building </button>
                                        <button class="btn btn-danger" @onclick="() => PerformBuildingAction(buildingType,BuildActions.DESTROY)"> Destroy </button>
                                        break;
                                    default:
                                        <button class="btn btn-success" @onclick="() => PerformBuildingAction(buildingType,BuildActions.BUILD)"> Build </button>
                                        break;
                                }
                            </td>
                        </tr>

                        

                        @if (GetBuildingInfoFromSector(buildingType) != null)
                        {
                            var building = GetBuildingInfoFromSector(buildingType);

                            <tr><p>Name : @building.Name</p></tr>
                            <tr><p>Description: @GetBuildingInfoFromConfiguration(buildingType, building.CurrentLvl).Description</p></tr>
                            <tr><p>Lvl : @building.CurrentLvl</p></tr>
                            <tr><p>Status: @building.Status.Code</p></tr>
                            <tr><p>Type : @building.BuildingType</p></tr>

                            <tr>
                                <td>Current Consumption</td>
                                @foreach (var resourceAmount in GetBuildingInfoFromConfiguration(buildingType, building.CurrentLvl).BaseResourceConsumption)
                                {
                                    <td><p>@resourceAmount.Resource : @resourceAmount.Amount</p></td>
                                }
                            </tr>

                            <tr>
                                <td>Current Production</td>
                                @foreach (var resourceAmount in GetBuildingInfoFromConfiguration(buildingType, building.CurrentLvl)?.BaseResourceProduction)
                                {
                                    <td><p>@resourceAmount.Resource : @resourceAmount.Amount</p></td>
                                }
                            </tr>

                            <tr>
                                <td>Building Costs of next level (@(@building.CurrentLvl+1))</td>
                                @foreach (var resourceAmount in GetBuildingInfoFromConfiguration(buildingType, building.CurrentLvl + 1)?.BuildCosts)
                                {
                                    <td><p>@resourceAmount.Resource : @resourceAmount.Amount</p></td>
                                }
                            </tr>

                            <tr>
                                <td>Consumption of next lvl (@(building.CurrentLvl+1))</td>
                                @foreach (var resourceAmount in GetBuildingInfoFromConfiguration(buildingType, building.CurrentLvl + 1)?.BaseResourceConsumption)
                                {
                                    <td><p>@resourceAmount.Resource : @resourceAmount.Amount</p></td>
                                }
                            </tr>

                            <tr>
                                <td>Production of next lvl (@(building.CurrentLvl+1))</td>
                                @foreach (var resourceAmount in GetBuildingInfoFromConfiguration(buildingType, building.CurrentLvl +1)?.BaseResourceProduction)
                                {
                                    <td><p>@resourceAmount.Resource : @resourceAmount.Amount</p></td>
                                }
                            </tr>
                        }
                        else
                        {
                            <tr><p>Name : @GetBuildingInfoFromConfiguration(buildingType, 1).Name</p></tr>
                            <tr><p>Description: @GetBuildingInfoFromConfiguration(buildingType, 1).Description</p></tr>
                            <tr><p>Lvl : 1</p></tr>
                            <tr><p>Status: @BuildingStatuses.NOT_BUILT</p></tr>
                            <tr><p>Type : @GetBuildingInfoFromConfiguration(buildingType, 1).BuildingType</p></tr>

                            <tr>
                                <td>Building Costs of next level (1)</td>
                                @foreach (var resourceAmount in GetBuildingInfoFromConfiguration(buildingType, 1).BuildCosts)
                                {
                                    <td><p>@resourceAmount.Resource : @resourceAmount.Amount</p></td>
                                }
                            </tr>

                            <tr>
                                <td>Consumption Lvl (1)</td>
                                @foreach (var resourceAmount in GetBuildingInfoFromConfiguration(buildingType, 1).BaseResourceConsumption)
                                {
                                    <td><p>@resourceAmount.Resource : @resourceAmount.Amount</p></td>
                                }
                            </tr>

                            <tr>
                                <td>Production Lvl (1)</td>
                                @foreach (var resourceAmount in GetBuildingInfoFromConfiguration(buildingType, 1).BaseResourceProduction)
                                {
                                    <td><p>@resourceAmount.Resource : @resourceAmount.Amount</p></td>
                                }
                            </tr>
                        }



                    </div>
                </tbody>
            </table>
        }

        @code {
            // var building in CurrentPlayerSector.Buildings
            [CascadingParameter]
            public Task<AuthenticationState> AuthState { get; set; }

            protected List<BuildingDocument> PlayerBuildings { get; set; }
            protected SectorDocument CurrentPlayerSector { get; set; }

            protected override async Task OnInitializedAsync()
            {
                await UpdatePageData();
                await base.OnInitializedAsync();
            }

            protected async Task UpdatePageData()
            {
                var authState = await AuthState;
                var currentUserId = Guid.Parse(authState.User.Claims.Where(c => c.Type == "PlayerGuid").Single().Value);
                var playerInfo = await Mediator.Send(new GetPlayerInfoQuery { Id = currentUserId });
                CurrentPlayerSector = await Mediator.Send(new GetSectorInfoQuery { Id = playerInfo.CurrentSector });
            }

            protected BuildingDocument GetBuildingInfoFromSector(BuildingTypes buildingType)
            {
                return CurrentPlayerSector?.Buildings?.SingleOrDefault(b => b.BuildingType == buildingType);
            }

            protected async Task<bool> BuildingButtonStatusIsDisabled (BuildingTypes buildingType)
            {
                await UpdatePageData();

                var building = GetBuildingInfoFromConfiguration(buildingType,1);

                var currentResources =  await Mediator.Send(new GetSectorResourcesQuery { SectorId = CurrentPlayerSector?.Id });
                var hasResourcesToBuild = currentResources?.HasResources(building.BuildCosts);

                return hasResourcesToBuild.HasValue ?
                    !hasResourcesToBuild.Value
                    :
                    false;
            }

            protected Building GetBuildingInfoFromConfiguration(BuildingTypes buildingType ,int lvl)
            {
                return BuildingConfiguration?.Buildings?.SingleOrDefault(b => b.BuildingType == buildingType && b.Lvl == lvl) ?? new Building();
            }

            protected async Task PerformBuildingAction(BuildingTypes buildingType, BuildActions buildAction)
            {
                switch (buildAction)
                {
                    case BuildActions.BUILD:
                        await NotificationChannel.Writer.WriteAsync(new BuildBuildingCommand { BuildingType = buildingType, SectorId = CurrentPlayerSector?.Id });
                        break;
                    case BuildActions.DESTROY:
                        await NotificationChannel.Writer.WriteAsync(new DestroyBuildingCommand { BuildingType = buildingType, SectorId = CurrentPlayerSector?.Id });
                        break;
                    case BuildActions.FIX:
                        await NotificationChannel.Writer.WriteAsync(new FixBuildingCommand { BuildingType = buildingType, SectorId = CurrentPlayerSector?.Id });
                        break;
                    case BuildActions.UPGRADE:
                        await NotificationChannel.Writer.WriteAsync(new UpgradeBuildingCommand { BuildingType = buildingType, SectorId = CurrentPlayerSector?.Id });
                        break;
                }

                Thread.Sleep(1000);
                await UpdatePageData();
                await InvokeAsync(StateHasChanged);
            }
}
