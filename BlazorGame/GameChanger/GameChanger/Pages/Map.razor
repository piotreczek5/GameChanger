@page "/map"
@using GameChanger.Core.GameData
@using System.Collections.Concurrent;

@inject MapConfiguration _mapConfiguration

    <table title="Player sectors">
        <thead>
            <tr>
                <th scope="col">SectorId</th>
                <th scope="col">Sector Land</th>
                <th scope="col">Sector City</th>            
            </tr>
        </thead>
        <tbody>
            @foreach (var sector in PlayerSectorsInformation)
            {
            <tr>
                <td> @sector.sector.Id</td>
                <td> @sector.sector.LandCode</td>
                <td> @sector.sector.CityCode</td>
                
                <td>
                    <tr>
                        @foreach (var res in sector.sectorResources.CurrentResources)
                        {
                            <td style="font-size:10px;text-align:center;">@res.Resource<br />@res.Amount</td>
                        }
                    </tr>
                    <tr>
                        @foreach (var res in sector.sectorResources.CurrentResourceBalance)
                        {
                            <td style="font-size: 10px;text-align:center;">@res.Amount</td>
                        }
                    </tr>
                </td>
            </tr>
            }
        </tbody>
    </table>
    
    <table class="table" title="All Lands and cities.">
        <thead>
            <tr>
                <th scope="col">@nameof(Land.Name)</th>
                <th scope="col">@nameof(Land.AreaSurface)</th>
                <th scope="col">@nameof(Land.ForestPercentCoverage)</th>
                <th scope="col">@nameof(Land.WaterPercentCoverage)</th>
                <th scope="col">@nameof(Land.FarmLandsPercentCoverage)</th>
                <th scope="col">@nameof(Land.Cities)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var land in _mapConfiguration.Lands)
            {
                <tr>
                    <td>@land.Name</td>
                    <td>@land.AreaSurface</td>
                    <td>@land.ForestPercentCoverage</td>
                    <td>@land.WaterPercentCoverage</td>
                    <td>@land.FarmLandsPercentCoverage</td>
                    <td>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th scope="col">Name</th>
                                    <th scope="col">XCoord</th>
                                    <th scope="col">YCoord</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var city in land.Cities)
                                {
                                <tr>
                                    <td>@city.Name</td>
                                    <td>@city.XCoordinate</td>
                                    <td>@city.YCoordinate</td>
                                </tr>
                                }
                            </tbody>
                        </table>
                    </td>
                </tr>
            }
        </tbody>
    </table>

@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    protected PlayerDocument CurrentPlayerInformation { get; set; }
    
    protected List<(SectorDocument sector, SectorResourcesDocument sectorResources)> PlayerSectorsInformation { get; set; } = new List<(SectorDocument, SectorResourcesDocument)>();

    private Timer _refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        _refreshTimer = new Timer(RefreshPageData, null, TimeSpan.FromSeconds(0), TimeSpan.FromSeconds(5));
        await UpdatePageData();
        await base.OnInitializedAsync();
    }

    private void RefreshPageData(object state)
    {
        UpdatePageData().ConfigureAwait(false);
    }

    protected async Task UpdatePageData()
    {
        var authState = await AuthState;
        var currentUserId = Guid.Parse(authState.User.Claims.Where(c => c.Type == "PlayerGuid").Single().Value);
        CurrentPlayerInformation = await Mediator.Send(new GetPlayerInfoQuery { Id = currentUserId });

        if(PlayerSectorsInformation.Any())
        {
            PlayerSectorsInformation = new List<(SectorDocument sector, SectorResourcesDocument sectorResources)>();
        }

        foreach(var sectorId in CurrentPlayerInformation.Sectors)
        {
            var sector = await GetSectorDetails(sectorId);
            var sectorResources = await Mediator.Send(new GetSectorResourcesQuery { SectorId = sectorId });
            PlayerSectorsInformation.Add((sector, sectorResources));
        }

        InvokeAsync(StateHasChanged);
    }

    protected Task<SectorDocument> GetSectorDetails(Guid? sectorId )
    {
        return  Mediator.Send(new GetSectorInfoQuery { Id = sectorId.Value });
    }

}