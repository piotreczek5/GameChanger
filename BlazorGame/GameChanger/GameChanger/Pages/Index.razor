@page "/index"
@layout MainLayout
@inject IHttpContextAccessor httpContextAccessor
@inject IMediator _mediator;
@inject MapConfiguration MapConfiguration;

<h1>Player Data</h1>
<br />
<p>UserLogged : @CurrentlyLoggedPlayer?.Nick </p>
<p>CurrentSector : @CurrentlyLoggedPlayer?.Status?.CurrentSectorDetails?.SectorId </p>

<button class="btn btn-primary" @onclick="async () => await GenerateSectorForPlayer()">Generate Sector</button>
<br />
<br />
<br />
<h1>All Player sectors:</h1>
<br />

@if (CurrentlyLoggedPlayer != null)
{
    int i = 0;
    @foreach (var city in Enum.GetValues(typeof(CityCodes)).Cast<CityCodes>())
    {
        <p> No : @(i++)</p>
        <p> City : @city</p>
        <p>

            @{
                var sectorInCity = CurrentSectors.SingleOrDefault(s => s.CityCode == city);
            }

            <button class="btn btn-primary" @onclick="async () => await TravelToCity(city)"> Move To City</button>
            @if (sectorInCity != null)
            {
                <p>Sector in the city : @sectorInCity.Id</p>
                <button class="btn btn-danger" @onclick="async () => await RemoveSector(sectorInCity.Id)"> Remove Sector</button>
            }
        </p>
    }
}

@code {
    protected PlayerDocument CurrentlyLoggedPlayer;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private IReadOnlyCollection<SectorDocument> CurrentSectors = new List<SectorDocument>();

    protected async override Task OnInitializedAsync()
    {
        await RefreshGamedata();
        await base.OnInitializedAsync();
    }

    protected async Task RefreshGamedata()
    {
        var authState = await AuthState;
        var currentUserMail = authState.User.Identity.Name;

        var playerGuid = await _mediator.Send(new GetPlayerIdOfUser { UserName = currentUserMail });
        CurrentSectors = await _mediator.Send(new GetPlayerSectorsQuery { PlayerId = playerGuid });
        CurrentlyLoggedPlayer = await _mediator.Send(new GetPlayerInfoQuery { Id = playerGuid });
    }

    protected async Task GenerateSectorForPlayer()
    {
        var cities = MapConfiguration.Lands.SelectMany(c => c.Cities)
            .Where(c => !CurrentSectors.Select(s => s.CityCode).ToList().Contains(c.Code))
            .ToList();

        if (cities.Count == 0)
            return;

        int randomCityIndex = new Random().Next(0, cities.Count);

        await GameNotificationProcessor.ProcessAsync(new GenerateSectorCommand { PlayerId = CurrentlyLoggedPlayer.Id, CityCode = cities[randomCityIndex].Code });
        await RefreshGamedata();
    }

    protected async Task RemoveSector(Guid? sectorId)
    {
        await GameNotificationProcessor.ProcessAsync(new RemoveSectorCommand { SectorId = sectorId });
        await RefreshGamedata();
    }

    protected async Task TravelToCity(CityCodes destinationCityCode)
    {
        if (destinationCityCode != CurrentlyLoggedPlayer?.Status?.CurrentLandDetails?.CityCode)
        {
            await GameNotificationProcessor.ProcessAsync(new TravelToCityCommand
            {
                PlayerId = CurrentlyLoggedPlayer.Id,
                SourceCityCode = CurrentlyLoggedPlayer?.Status?.CurrentLandDetails?.CityCode,
                DestinationCityCode = destinationCityCode
            });
            Thread.Sleep(400);
            await RefreshGamedata();
        }
    }
}