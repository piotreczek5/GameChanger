@page "/"
@layout LoginLayout
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Identity
@using GameChanger.GameUser.DataTypes;
@inject SignInManager<GameChangerUser> SignInManager;
@inject AuthenticationStateProvider AuthStatePrvider;
@inject UserManager<GameChangerUser> UserManager;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IUserService UserService;

<div class="container">
    <div class="col-12 row">
        <p>&nbsp;</p>
    </div>
    <div class="col-12 row">
        <div class="col-6" style="border-right:groove">
            <div>
                <br /><br /><br /><br /><br />
            </div>
            <img src="https://borlabs.io/wp-content/uploads/2019/09/blog-wp-login.png" width="600px" height="200px" />
            <div>
                <br /><br /><br /><br /><br />
            </div>
        </div>
        <div class="col-6 justify-content-center" style="border-left:groove">
            <EditForm Model="@Input" OnValidSubmit="@ValidateUser">
                <div>
                    <br /><br /><br /><br /><br />
                </div>
                <div style="margin-left:auto;margin-right:auto">
                    <h3> Game Changer Login</h3>
                </div>
                <div> <br /></div>
                <div>
                    <input class="form-control col-12" placeholder="Email address" @bind="Input.Email" />
                </div>
                <br />
                <div>
                    <input type="password" class="form-control col-12" placeholder="Password" @bind="Input.Password" />
                </div>
                <br />
                <div>
                    <input type="checkbox" class="form-control col-12"  @bind="Input.RememberMe" />
                </div>
                <br />
                <div>
                    <span class="col-12"></span>
                    <input type="submit" class="form-control col-6 btn btn-primary" value="Login" />
                </div>
                <br />
                <div hidden="@_hideResult">
                    <p class="alert alert-@_alertType">@_resultText</p>
                </div>
                <div>
                    <br /><br /><br /><br /><br />
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code{
    private bool _hideResult = true;
    private string _alertType = "info";
    private string _resultText = string.Empty;

    private InputModel Input = new InputModel() { Email = "pusz.piotr@wp.pl", Password = "Pusz.piotr!1"  };

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState?.User?.Identity?.IsAuthenticated == true)
        {
            NavigationManager.NavigateTo("/index");
        }
    }

    private async Task<bool> LoginAsync()
    {
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri(@"http://localhost:50528");

        string serializedUser = JsonConvert.SerializeObject(Input);

        var requestMessage = new HttpRequestMessage(HttpMethod.Post, "api/Users/Login");
        requestMessage.Content = new StringContent(serializedUser);

        requestMessage.Content.Headers.ContentType
            = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

        var response = await client.SendAsync(requestMessage);

        var responseStatusCode = response.StatusCode;
        var responseBody = await response.Content.ReadAsStringAsync();

        var loginInResult = JsonConvert.DeserializeObject<LoginResult>(responseBody);

        await ((GameChangerAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(Input);

        return loginInResult.Succeeded;
    }

    private async Task<bool> ValidateUser()
    {
        var user = await UserManager.FindByNameAsync(Input.Email);

        if (user != null)
        {
            var succeded = await LoginAsync();

            if (succeded == true)
            {


                _resultText = $"Successfully Logged in. Welcome {user.PlayerId}";
                _alertType = "success";
                _hideResult = false;
                NavigationManager.NavigateTo("/index");
            }
            else
            {
                _resultText = "Incorrect Password.";
                _alertType = "danger";
            }

        }
        else
        {
            _alertType = "warning";
            _resultText = "Could not find user.";
        }

        _hideResult = false;

        return await Task.FromResult(true);
    }
}

