@inherits LayoutComponentBase
@implements IDisposable
<AuthorizeView>
    <Authorized>
        <nav class="navbar sticky-top" style="background-color:white; box-shadow:0px 20px 20px 0px #7c57bbc2">
            <div class="container" style="max-width:inherit;display:block;font-size:10px">
                <div class="row">
                    @foreach (var resource in ResourcesSupply.Keys)
                    {
                        <div class="col centered">
                            <div class="row">
                                <img src=@GetImagePathForType(resource) width="30px" height="30px" />
                            </div>
                            <div class="row">
                                @resource.ToString()
                            </div>
                            <div class="row">@ResourcesSupply[resource]</div>

                            @if (ResourceBalance[resource] > 0)
                            {
                                <div class="row">+@ResourceBalance[resource]/s</div>
                            }
                            else
                            {
                                <div class="row">@ResourceBalance[resource]/s</div>
                            }

                        </div>
                    }
                </div>
                <div class="row" style="text-align: center; justify-content: space-evenly;font-size:14px; margin-top:20px;">
                    <div class="col">
                        <div class="row" style="justify-content:center">Current Land</div>
                        <div class="row" style="justify-content: center">@CurrentSector?.LandCode</div>
                    </div>
                    <div class="col">
                        <div class="row" style="justify-content:center">Current city</div>
                        <div class="row" style="justify-content: center">@CurrentSector?.CityCode</div>
                    </div>
                    <div class="col">
                        <div class="row" style="justify-content:center">Player Status</div>
                        <div class="row" style="justify-content: center">@CurrentlyLoggedPlayer?.Status?.Code</div>
                    </div>
                </div>
            </div>
        </nav>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    protected PlayerDocument CurrentlyLoggedPlayer;
    protected SectorDocument CurrentSector;
    private Timer _refreshSectorInfoTimer;

    protected Dictionary<ResourceType, decimal> ResourcesSupply = new Dictionary<ResourceType, decimal>();
    protected Dictionary<ResourceType, decimal> ResourceBalance = new Dictionary<ResourceType, decimal>();

    private Guid _playerGuid;

    protected override async Task OnInitializedAsync()
    {
        await GetUserData();
        InitializeResources();

        _refreshSectorInfoTimer = new Timer(new TimerCallback(RefreshSector), null, TimeSpan.FromSeconds(0),TimeSpan.FromSeconds(1));

        base.OnInitialized();
    }

    private async Task GetUserData()
    {
        var authState = await AuthState;
        var currentUserId = Guid.Parse(authState.User.Claims.Where(c => c.Type == "PlayerGuid").Single().Value);
        CurrentlyLoggedPlayer = await Mediator.Send(new GetPlayerInfoQuery { Id = currentUserId });
        CurrentSector = await Mediator.Send(new GetSectorInfoQuery { Id = CurrentlyLoggedPlayer?.CurrentSector?.CurrentSectorId });
    }

    private void InitializeResources()
    {
        Enum.GetValues(typeof(ResourceType)).Cast<ResourceType>()
            .Select(rt => new ResourceAmount { Amount = 0.0m, Resource = rt })
            .ToList()
            .ForEach(r =>
            {
                ResourcesSupply.Add(r.Resource, r.Amount);
                ResourceBalance.Add(r.Resource, r.Amount);
            });
    }

    private async void RefreshSector(object state)
    {
        try
        {
            //_refreshSectorInfoTimer?.Change(Timeout.Infinite, 0);
            await GetUserData();
            CurrentSector = await Mediator.Send(new GetSectorInfoQuery { Id = CurrentlyLoggedPlayer?.CurrentSector?.CurrentSectorId });
            var currentSectorResources = await Mediator.Send(new GetSectorResourcesQuery { SectorId = CurrentSector?.Id });

            foreach (var resource in Enum.GetValues(typeof(ResourceType)).Cast<ResourceType>())
            {
                ResourcesSupply[resource] = currentSectorResources?.CurrentResources?.SingleOrDefault(r => r.Resource == resource)?.Amount ?? 0;
                ResourceBalance[resource] = currentSectorResources?.CurrentResourceBalance?.SingleOrDefault(r => r.Resource == resource)?.Amount ?? 0;
            }

            await Mediator.Publish(new RecalculateSectorBalanceCommand { SectorId = CurrentSector?.Id });

            await InvokeAsync(StateHasChanged);

            //_refreshSectorInfoTimer?.Change(500, 500);
        }
        catch(Exception e)
        {
            var a = e;
        }

    }

    protected string GetImagePathForType(ResourceType type)
    {
        return $"/images/{type.ToString().ToLower()}_main_bar.jpg";
    }

    public void Dispose()
    {
        _refreshSectorInfoTimer?.Dispose();
    }
}
