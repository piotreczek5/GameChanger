@inherits LayoutComponentBase
@implements IDisposable
<AuthorizeView>
    <Authorized>
        <nav class="navbar sticky-top" style="background-color:white; box-shadow:0px 20px 20px 0px #7c57bbc2">
            <div class="container" style="max-width:inherit;display:block;">
                <div class="row">
                    @foreach (var resource in ResourcesSupply.Keys)
                    {
                        <div class="col centered">
                        <div class="row">
                            <img src=@GetImagePathForType(resource) width="50px" height="50px" />
                        </div>
                        <div class="row">
                            @resource.ToString()
                        </div>
                        <div class="row">@ResourcesSupply[resource]</div>
                       
                        @if (ResourceBalance[resource] > 0)
                        {
                            <div class="row">+@ResourceBalance[resource]</div>
                        }
                        else
                        {
                            <div class="row">@ResourceBalance[resource]</div>
                        }

                    </div>
                     }
                    </div>
            </div>
        </nav>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    protected PlayerDocument CurrentlyLoggedPlayer;
    protected SectorDocument CurrentSector;
    private Timer _refreshSectorInfoTimer;

    protected Dictionary<ResourceType, decimal> ResourcesSupply = new Dictionary<ResourceType, decimal>();
    protected Dictionary<ResourceType, decimal> ResourceBalance = new Dictionary<ResourceType, decimal>();

    private Guid _playerGuid;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        var currentUserMail = authState.User.Identity.Name;
        InitializeResources();
        var playerGuid = await Mediator.Send(new GetPlayerIdOfUser { UserName = currentUserMail });
        _playerGuid = playerGuid;
        CurrentlyLoggedPlayer = await Mediator.Send(new GetPlayerInfoQuery { Id = playerGuid });

        _refreshSectorInfoTimer = new Timer(new TimerCallback(RefreshSector), null, 0, 3000);

        base.OnInitialized();
    }

    private void InitializeResources()
    {
        Enum.GetValues(typeof(ResourceType)).Cast<ResourceType>()
            .Select(rt => new ResourceAmount { Amount = 0.0m, Resource = rt })
            .ToList()
            .ForEach(r =>
            {
                ResourcesSupply.Add(r.Resource, r.Amount);
                ResourceBalance.Add(r.Resource, r.Amount);
            });
    }

    private async void RefreshSector(object state)
    {
        try
        {
            _refreshSectorInfoTimer.Change(Timeout.Infinite, 0);

            CurrentSector = await Mediator.Send(new GetSectorInfoQuery { Id = CurrentlyLoggedPlayer.CurrentSector });
            var currentSectorResources = await Mediator.Send(new GetSectorResourcesQuery { SectorId = CurrentSector?.Id });

            foreach (var resource in Enum.GetValues(typeof(ResourceType)).Cast<ResourceType>())
            {
                ResourcesSupply[resource] = currentSectorResources?.CurrentResources?.SingleOrDefault(r => r.Resource == resource)?.Amount ?? 0;
                ResourceBalance[resource] = currentSectorResources?.CurrentResourceBalance?.SingleOrDefault(r => r.Resource == resource)?.Amount ?? 0;
            }

            await Mediator.Publish(new RecalculateSectorBalanceCommand { SectorId = CurrentSector?.Id });

            await InvokeAsync(StateHasChanged);

            _refreshSectorInfoTimer.Change(500, 500);
        }
        catch(Exception e)
        {
            var a = e;
        }

    }

    protected string GetImagePathForType(ResourceType type)
    {
        return $"/images/{type.ToString().ToLower()}_main_bar.jpg";
    }

    public void Dispose()
    {
        _refreshSectorInfoTimer.Dispose();
    }
}
